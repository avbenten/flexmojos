<%--
  GRANITE DATA SERVICES
  Copyright (C) 2007-2008 ADEQUATE SYSTEMS SARL

  This file is part of Granite Data Services.

  Granite Data Services is free software; you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation; either version 3 of the License, or (at your
  option) any later version.

  Granite Data Services is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
  for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, see <http://www.gnu.org/licenses/>.

  @author Franck WOLFF
  @author Christopher Stokes
--%><%
import com.vacillant.flexmojos.jira126.annotations.MagicObject;
import com.vacillant.flexmojos.jira126.annotations.MagicObject.MagicType;
import java.lang.reflect.Field;

    Set as3Imports = new TreeSet();

    for (jImport in jClass.imports) {
        if (jImport.as3Type.hasPackage() && jImport.as3Type.packageName != jClass.as3Type.packageName)
            as3Imports.add(jImport.as3Type.qualifiedName);
    }

%>/**
 * Generated by Gas3 v${gVersion} (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERRIDDEN EACH TIME YOU USE
 * THE GENERATOR. CHANGE INSTEAD THE INHERITED CLASS (${jClass.as3Type.name}.as).
 */

package ${jClass.as3Type.packageName} {
<%
///////////////////////////////////////////////////////////////////////////////
// Write Import Statements.

    for (as3Import in as3Imports) {
		String convertedImport = as3Import.toString();
		if (as3Import.toString().equals("javax.xml.datatype.XMLGregorianCalendar")) {
			convertedImport = "Date";
		}%>
    import ${convertedImport};<%
    }
	
	// Give me a new line to make this look good on output
	%>
	<%
///////////////////////////////////////////////////////////////////////////////
// Write Class Declaration.
	MagicObject.MagicType magicType = MagicObject.MagicType.NO_MAGIC;
	if(jClass.getType().isAnnotationPresent(MagicObject.class)) {
		MagicObject magicObject = jClass.getType().getAnnotation(MagicObject.class);
		magicType = magicObject.value();
	}
%>
	[Bindable]
	[MagicObject(value="${magicType}")]
    public class ${jClass.as3Type.getName()}Base<%

        boolean implementsWritten = false;
        if (jClass.hasSuperclass()) {
            %> extends ${jClass.superclass.as3Type.name}<%
        } else {
            %> <%

            implementsWritten = true;
        }

        for (jInterface in jClass.interfaces) {
            if (!implementsWritten) {
                %> implements ${jInterface.as3Type.name}<%

                implementsWritten = true;
            } else {
                %>, ${jInterface.as3Type.name}<%
            }
        }

    %> {
<%
    ///////////////////////////////////////////////////////////////////////////
    // Write Private Fields.

    for (jProperty in jClass.properties) {
		if (jProperty.isEnum()) {
			%>
			[XmlElement(name="${jProperty.name}", type="String")]
			public var ${jProperty.name}:String;
			<%
		}
		else {
			String convertedPropertyType = jProperty.as3Type.name;
			if (jProperty.as3Type.getName().equals("XMLGregorianCalendar")) {
				convertedPropertyType = "Date";
			}		
			%>
			public var ${jProperty.getName()}:${convertedPropertyType};
			<%
		}
	}
	%>
    }
}